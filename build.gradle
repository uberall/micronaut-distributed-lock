import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id "groovy"
    id 'maven-publish'
    id "com.diffplug.eclipse.apt" version "3.37.2"
}

subprojects {
    apply plugin: "groovy"
    apply plugin: "com.diffplug.eclipse.apt"
    apply plugin: "checkstyle"

    group "com.uberall"
    version libVersion

    repositories {
        mavenCentral()
    }

    // use JUnit 5 platform
    test {
        useJUnitPlatform()
    }

    java {
        sourceCompatibility = JavaVersion.toVersion('1.8')
        targetCompatibility = JavaVersion.toVersion('1.8')
        withSourcesJar()
        withJavadocJar()
    }

    apply from: "$rootProject.projectDir/gradle/micronaut.gradle"
    apply from: "$rootProject.projectDir/gradle/publish.gradle"

    tasks.withType(Test) {
        maxParallelForks = System.getProperty("test.runners", "1") as int
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events TestLogEvent.STARTED,
                        TestLogEvent.FAILED,
                        TestLogEvent.PASSED,
                        TestLogEvent.SKIPPED,
                        TestLogEvent.STANDARD_ERROR
                exceptionFormat TestExceptionFormat.FULL
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
}

task full_test(type: GradleBuild) {
    dependsOn 'clean'
    tasks = ['core:checkstyleMain', 'redis:checkstyleMain', 'data-jdbc:checkstyleMain', 'core:test', 'redis:test', 'data-jdbc:test']
}
